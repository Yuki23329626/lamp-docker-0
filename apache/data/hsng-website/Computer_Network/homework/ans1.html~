<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>
<HEAD>
   <META NAME="GENERATOR" CONTENT="Mozilla/3.0Gold (Win95; I) [Netscape]">
</HEAD>
<BODY BACKGROUND="../handout/gif/bg-slate.gif">

<UL>
<P><B>1.</B><FONT COLOR="#0000FF">比較<B>電路交換</B>與<B>封包交換</B>之不同及其優缺點。
</FONT></P>
</UL>

<UL>
<UL>
<LI>電路交換（Circuit Switching）： </LI>

<UL>
<LI>通常用在電信網路（如:電話）。 </LI>

<LI>在建立兩台電腦間的一個連線時，其所經過的所有鏈路<BR>
及交換機均需保留固定的資源（頻寬、緩衝區等）。 </LI>

<LI>好處是每一連線均可得到固定的服務品質保證（quality<BR>
of service）。 </LI>

<LI>缺點是提供的服務少，同時間支援的人數少。 </LI>
</UL>

<LI>封包交換（Packet Switching）： </LI>

<UL>
<LI>通常用在電腦網路。 </LI>

<LI>封包交換的網路資源是共享的（沒有預留），所以交換<BR>
機有時會收到太多封包而無法馬上轉送而必須放在緩衝<BR>
區中。 </LI>

<LI>好處是可提供較多的服務，可同時支援較多人。 </LI>

<LI>缺點是可能會遺失封包，較難提供百分之百的服務品質<BR>
保證。 </LI>

<LI>別名“儲存再傳送”（store and forward）技術。 </LI>

<LI>每台電腦要送資料前要先將資料切成一小塊一小塊的封<BR>
包，交換機收到封包後再轉送到適當的位置。 </LI>
</UL>

<LI>其他： </LI>

<UL>
<LI>該使用Circuit switching或Packet switching，通常取決於Traffic<BR>
characteristics和Quality of service。 </LI>

<LI>Packet switching的quality of service較差，但是可以保證在可<BR>
忍受的範圍內（如delay、loss packet、jitter）。 </LI>
</UL>
</UL>

<P><B>2.</B><FONT COLOR="#0000FF">什麼是<B>通訊協定</B>？為什麼網路上要那麼多的通訊協定？</FONT>
</P>

<UL>
<LI>通訊協定是電腦協會所制定的標準，用來說明傳送的資料如何<BR>
層級化，如何來包裝這些資料。不同資料包裝的層級，描述了<BR>
在傳送資料到不同的網路與通訊媒介時，所需要的軟硬體設備<BR>
。負責控制資訊在網路中的相對應的兩層間(peer layer)的傳送規<BR>
定，其內容包括 </LI>

<UL>
<LI>通訊語法（Syntax）：data formats, signal levels, ... </LI>

<LI>資料意義（Semantics）：coordination, error handling, ... </LI>

<LI>時序（Timing）：speed matching, sequencing, ... </LI>
</UL>

<P>每一層的通訊協定必須提供適當的服務給上層的通訊協定使用，<BR>
而在進行本身的工作時則使用下層通訊協定提供之服務。 <BR>
</P>

<LI>分層的原則是將來改變或更換某一層的通訊協定時不會影響到<BR>
其他層通訊協定的工作，除了可以將一個大的通訊任務分為若<BR>
干較小而容易各別完成的任務之外，也提供了極佳之擴充性。<BR>
因為當將來有較好或較快的通訊協定可使用時可以較容易的加<BR>
入結構中。 </LI>
</UL>

<P><B>3.<FONT COLOR="#0000FF">分段與組合</FONT></B><FONT COLOR="#0000FF">(segmentation
and reassembly)通常在七層中的那一層進行？<BR>
　為什麼？</FONT> </P>

<UL>
<LI>通常在網路層進行。 </LI>
</UL>
</UL>

<OL>
<UL>
<LI>主要是因為一個packet的建立是在網路層完成的，而一個packet<BR>
有一定的長度限制，所以在網路層就必須做好segmentation的動<BR>
作。 </LI>

<P>相對的，reassembly的動作也必須在對等的網路層才能做。<BR>
</P>
</UL>

<P><B>4.<FONT COLOR="#0000FF">單模光纖</FONT></B><FONT COLOR="#0000FF">與<B>多模光纖</B>有何不同？又<B>同步傳輸</B>與<B>非同步傳輸</B>有何不<BR>
　同？ </FONT></P>

<UL>
<LI>單模光纖：體積較小（細），只能容納某種頻率的光。 </LI>

<LI>多模光纖：體積較大（粗），可容納多種頻率的光，但易受干<BR>
擾。 </LI>

<P>因為不同頻率的光，其反射角和介質速率不同，故可能不同時<BR>
到達目的。 <BR>
</P>

<LI>一般而言，非同步傳輸是指送端與收端在傳送資料前不必事先<BR>
溝通。 </LI>

<P>技術上而言，非同步傳輸是指送端與收端間不需要針對每一傳<BR>
送的位元進行同步溝通（就是不會將彼此的脈衝調成完全同步<BR>
）。 </P>

<UL>
<LI>非同步傳輸的特性是在每一個字元的前後，加入額外的<BR>
判別位元來告知收受者，以保證每一個字元都能被完整<BR>
地送達。 </LI>

<LI>非同步傳輸的資料傳輸率較同步傳輸低。這是因為每個<BR>
字元間都插入了與資料內容無關的控制位元與錯誤偵測<BR>
位元。 </LI>

<LI>同步傳輸的特性是在一群字元的前後加入判別位元來告<BR>
知收受者，以保證每一群字元能被完整地送達。 </LI>

<LI>同步傳輸主要應用在高速的資料傳輸。因為控制位元與<BR>
錯誤偵測位元出現的比例較非同步傳輸來得低，所以資<BR>
料傳輸率比較高。 </LI>
</UL>
</UL>

<P><B>5.<FONT COLOR="#0000FF">基頻傳輸</FONT></B><FONT COLOR="#0000FF">與<B>寬頻傳輸</B>有何不同？為什麼寬頻傳輸會有雙纜系統？</FONT>
</P>

<UL>
<LI>基頻傳輸： </LI>

<UL>
<LI>將訊號以原來形式傳送（即以數位訊號傳送）。 </LI>

<LI>數位訊號：分離的脈衝形態，每一訊號代表一位元。 </LI>

<LI>常見媒介：50Ω同軸電纜，最長可達500公尺，可用<BR>
repeater增長。 </LI>

<LI>雙向傳輸。 </LI>

<LI>資料容量小，速率慢，錯誤率低，傳輸距離短。 </LI>
</UL>

<LI>寬頻傳輸： </LI>

<UL>
<LI>訊號以連續不間斷的電磁波形式傳送（即類比訊號）。 </LI>

<LI>數位訊號傳送前須先調變（Modulation）AM、FM、PM。 </LI>

<LI>訊號收到後須解調變（Demodulation）。 </LI>

<LI>頻率劃分多工處理：使用75Ω同軸電纜可有300 ~ 400MHz<BR>
頻寬，可將此頻寬再切割成許多頻道。 </LI>

<LI>單向傳輸。 </LI>

<LI>資料容量大，速率快，錯誤率高，傳輸距離長。 </LI>
</UL>
</UL>
</OL>

<OL>
<UL>
<LI>因為寬頻傳輸是單向傳輸，所以需要雙纜系統，一條負責傳送<BR>
，另一條負責接收。 </LI>
</UL>

<P><B>6.</B><FONT COLOR="#0000FF">比較<B>曼撤斯特編碼法</B>與<B>RS-232-C編碼</B>法的不同。為什麼區域網路<BR>
　上我們用曼撤斯特編碼法？ </FONT></P>

<UL>
<LI>RS-232-C編碼： </LI>

<UL>
<LI>以一位元組（5~8 bits）為單位傳送，前後加Start及Stop <BR>
bits。 </LI>

<LI>負電壓代表1，正電壓代表0。 </LI>

<LI>使用非同步傳輸：平常不送資料時維持在負電壓，送<BR>
資料之前先送一個正電壓代表start bit。 </LI>

<LI>兩字元間最少要隔一個stop bit（負電壓）。 </LI>
</UL>

<LI>曼撤斯特編碼： </LI>

<UL>
<LI>在一位元時間內，電壓由正電位變負電位代表0，反之<BR>
代表1。 </LI>

<LI>為使電位變化有預期的規律性，讓每一位元在傳送及<BR>
接收時，可以達到同步的效果。 </LI>

<LI>在每一個位元時間的中央都有電位的轉換。 </LI>
</UL>
</UL>
</OL>

<UL>
<UL>
<UL>
<LI>一般而言，區域網路由於傳送的速度較快而且資料較長<BR>
，當資料內容出現一長串相同的值時（如一連串的“1”<BR>
或一連串的“0”）常會造成接收端在接收資料的錯誤。<BR>
因為接收端通常使用自己的clock到傳輸線上以取樣的方<BR>
式讀取資料，若傳送速率與接收速率完全相同時，接收<BR>
端的的取樣動作便不會發生問題。如果有一點差異，則<BR>
容易造成在取樣時的時間差（相位差）。 </LI>
</UL>

<P>因為<B>曼撤斯特編碼法</B>有在每一個位元時間的中央都有電位的<BR>
轉換的特性，可以給接收端一個參考的取樣時間，使其能達到<BR>
「同步」取樣的功效。因此區域網路上我們用曼撤斯特編碼法<BR>
的目的即是為了達到同步的效果。 <BR>
</P>
</UL>

<P><B>7.</B><FONT COLOR="#0000FF">根據Nyquist的理論，在一條4000Hz的媒體上，每一訊號可代表4個<BR>
　不同的值，其每秒最多可傳多少位元？ </FONT></P>

<UL>
<LI>公式：D = 2 B㏒<FONT SIZE=-2>2</FONT>K </LI>

<P>D = 2×4000×㏒<FONT SIZE=-2>2 </FONT>4 = 16000 bps </P>

<P>每秒最多可傳16000位元。<BR>
</P>
</UL>

<P><B>8.</B><FONT COLOR="#0000FF">請問11001111101111110111111111111000001111110在做完bit
stuffing<BR>
　後的結果是什麼？為什麼我們要做bit stuffing？</FONT> </P>

<UL>
<LI>結果：110011111<B><U>0</U></B>011111<B><U>0</U></B>1011111<B><U>0</U></B>11111<B><U>0</U></B>110000011111<B><U>0</U></B>10
</LI>

<LI>當媒體存取控制子層準備好一個封包要往傳輸媒體上送時，<BR>
為了讓收端可以辨識一個框（frame），送端必須在資料前後<BR>
分別加上框頭記號及框尾記號。若現在定義01111110當作框<BR>
頭或框尾時，為了避免資料中的01111110不會被誤認為框頭<BR>
或框尾，因此用一種bit stuffing的方法，每看到五個1就插入一<BR>
個0，經過這樣編碼以後，就不會將資料中的01111110誤認為<BR>
框頭或框尾了。 </LI>
</UL>

<P><B>9.</B><FONT COLOR="#0000FF">比較CRC與Checksum在做錯誤偵測上的優缺點。</FONT>
</P>

<UL>
<LI>CRC的優點： </LI>

<UL>
<LI>可偵測出所有1 bit及2 bit錯誤。 </LI>

<LI>可偵測出所有奇數個位元錯誤。 </LI>

<LI>可偵測出所有長度小於或等於FCS之連續錯誤。 </LI>

<LI>可偵測出大部分較長的連續錯誤。 </LI>
</UL>

<LI>CRC的缺點： </LI>

<UL>
<LI>無法偵測出資料頭尾被加入一串零的錯誤。 </LI>

<LI>計算複雜。 </LI>

<LI>費時。 </LI>

<LI>代價高。 </LI>
</UL>
</UL>
</UL>

<OL>
<UL>
<LI>Checksum的優點： </LI>

<UL>
<LI>計算簡單。 </LI>

<LI>省時。 </LI>

<LI>代價低。 </LI>
</UL>

<LI>Checksum的缺點： </LI>

<UL>
<LI>無法偵測出所有常見的錯誤。 </LI>
</UL>
</UL>

<P><B>10.</B><FONT COLOR="#0000FF">如果message是00110110111011，generator是110101，則CRC是<BR>
　什麼？如果message是110110111011，CRC又是什麼呢？IEEE <BR>
　802系列如何解決這個問題？ </FONT></P>

<UL>
<LI>M=00110110111011時，CRC=10000 </LI>

<LI>M=110110111011時，CRC=10000 </LI>

<LI>上述的問題出在原本的CRC無法偵測資料頭尾被加入一串零<BR>
的錯誤。因為既然T(x)可以被G整除，那麼在T(x)的前後加上<BR>
一串零，一樣可以被整除，所以才會無法偵測資料頭尾被加<BR>
入一串零的錯誤。 </LI>

<P>IEEE 802系列的解決方法是將M(x)最前面32 bits做補數運算<BR>
（解決erronous leading zeros）並將所得之R(x)再做補數運算<BR>
即為FCS碼（解決erronous trailing zeros）。 </P>
</UL>
</OL>

</BODY>
</HTML>

#!/usr/bin/perl

$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin';
$VAR_idxdir =  "/newhome/rhhwang/Bible/Articles";
$GAISBIN = "gais";
$TEMP_DIR   = "/home/www/cgi-bin/tmp";

# Maximum nunber of files return for a query
$MAX_FILE   = 200 ;

# Number of matched lines return when show matched lines
$MATCH_CNT  = 3 ;

# Number of files return in webgetnext.plain
$NEXT_CNT   = 10 ;

# full path name of WEBgais temp file
$WEB_TEMP   = "$TEMP_DIR/.webgais_tmp";

&query_handler;

sub print_header
{
   print "Content-type: text/html\n\n",
         "<HEAD><TITLE>Search Results</TITLE></HEAD>\n",
         "<BODY>\n";

}

sub print_trailer
{
    print "</BODY></HTML>\n";
}

##########################################################################
# query_handler( void ) :
# RETURN : ( void )
# OUTPUT : Homepage for First $nextcnt Files of Query Result
##########################################################################
sub query_handler
{
#   &print_header;
   # GET method use ENV list to pass fill-out-form,
   $input_query = $ENV{'QUERY_STRING'};

   # Strip the variables out from the stdin
   @pairs = split(/&/, $input_query);
   foreach $pair (@pairs) {
      ($name, $value) = split(/=/, $pair);
      # restore blank
      $value =~ tr/+/ /;
      # restore special char
      $value =~ s/%([a-fA-F0-9][a-fA-F0-9])/pack("C", hex($1))/eg;
      # store them into associative array %VAR
      $VAR{$name} = $value ;
   }
   # get all variables from associative array
   $VAR_query   = $VAR{'query'};
   $VAR_case    = $VAR{'case'};
   $VAR_chinese = $VAR{'chinese'};
   $VAR_match   = $VAR{'match'};
   $VAR_error   = $VAR{'error'};
   $VAR_formated = $VAR{'formated'};

   # check for query pattern is empty or not ?
   &err_no_query if ( $VAR_query =~ /^\s*$/ ) ;

   $maxfile    = $MAX_FILE  ;    
   $nextcnt    = $NEXT_CNT  ;  

   # translate to GAIS index directory option (-H)
   
   $Hoption = "-H $VAR_idxdir";

   # translate to GAIS matching criteria options
   $options  = "i";
   $options  = ""  if ( $VAR_case    eq "on" ) ;
   $options .= "P" if ( $VAR_chinese eq "on" ) ;
   $options .= "h";
   if ( $VAR_match eq "prefix" ) {
      $options .= "p";
   } elsif ( $VAR_match eq "word" ) {
      $options .= "w";
   } elsif ( $VAR_match eq "substr" ) {
      $options .= "s";
   }
   # if query pattern contains Chinese word, disable error tolerant
   $options .= $VAR_error
      if ( $VAR_error =~ /^[1-5]$/ && $VAR_query !~ /[^\x00-\x7e]/ ) ;

##########################################################################
#   $VAR_query =~ s/\s+AND\s+/&/g;  # change AND to &
#   $VAR_query =~ s/\s+OR\s+/|/g;   # change OR to | 
#   push(@cmdlist, "'", $VAR_query, "'"); #this is uggly to put quotes!
##########################################################################


   $cmd = $GAISBIN . " " . $Hoption . " " . $VAR_query;

   $WEB_TEMP .= "_" . $$ ;
   open(TMPFILE, ">$WEB_TEMP");

   open(TMPOUT,"-|") || exec($cmd);

   $found   = 0;
   $err_msg = "";


tmpout:
   while(<TMPOUT>){
     $found++ if ($_ =~ /newhome/);
     next tmpout if ( $_ =~ /^ \x08.+cannot stat/ );
     next tmpout if ( $_ =~ /^ld.so: warning:/ );
     if ( $_ =~ /^ \x08/ ) {
        ($_) = ( $_ =~ /^ \x08(.+)$/ );
        $err_msg .= "$_\n";
        next tmpout;
     }
     if ( $err_msg ne "" ) {
        $err_msg .= "$_\n" ;
        next tmpout;
     }

     s\/newhome/rhhwang/Bible/Articles/\\;
     s\$VAR_query\<font color=#ff0000>$VAR_query</font>\;
     print TMPFILE $_;
#     print TMPFILE "<br>";
   }


   close(TMPOUT);
   close(TMPFILE);

   unlink($WEB_TEMP) if ( $found == 0 ) ;

   # check $err_msg to report error
   &err_result($err_msg) if ( $err_msg ne "" ) ;

   # check $found to report no match
   &err_no_match($VAR_query, 0) if ( $found == 0 ) ;

   # generate query result in HTML format
   $offset = 1;
   $count = 30;
   &show_next($WEB_TEMP, $offset, $count, $found);

#    &print_trailer;
}

##########################################################################
# err_result( <error_message> ):
# --- generate a report in HTML format for gais error message
# RETURN : ( void )
##########################################################################
sub err_result
{
   local( $err_msg ) = @_ ;

   chop($err_msg);
   print "Content-type: text/html\n\n",
         "<HEAD><TITLE>GAIS Error Report</TITLE></HEAD>\n",
         "<BODY>\n<H1> GAIS Error Report </H1>\n",
         "This query generated the following error message :\n",
         "<B><PRE>\n$err_msg</PRE></B>\n",
         "Please check this query pattern again !!<P>\n";
#   &print_hint;
   print "</BODY>\n";
   exit 1;
}

##########################################################################
# check_dir( <directory_to_be_checked> ):
# --- check the directory is readable , if not return null string
# RETURN : ( null_string: fail; full_path: successful )
##########################################################################
sub check_dir
{
   local( $test_dir ) = @_;

   $test_dir =~ m|^(/tmp_mnt)?(.*)$| ;
   $test_dir = $2 ;
   if ( chdir($test_dir) == 1 ) {
      return ( $test_dir );
   } else {
      return ( "" );
   }
}

##########################################################################
# is_in_stoplist( <query_string> ):
# --- check the query string is in the stop list or not ?
# RETURN : ( 1: in stoplist; 0: ok )
##########################################################################
sub is_in_stoplist
{
   local( $query_string ) = @_ ;
   local( %stoplist );

   $query_string =~ tr/[A-Z0-9]/a/;

   %stoplist = ( ".", 1, "a", 1 );
   return( $stoplist{$query_string} ) ;
}

##########################################################################
# err_no_query( void ):
# --- without query pattern, ask user to re-fill pattern again.
# RETURN : ( void )
##########################################################################
sub err_no_query
{
   print "Content-type: text/html\n\n",
         "<HEAD><TITLE>No Query Pattern Input</TITLE></HEAD>\n",
         "<BODY>\n<H1> No Query Pattern Input </H1>\n",
         "Please <B>fill out the query pattern</B> then submit.<BR>\n",
         "GAIS-Plain can not process without query pattern.<P>\n";
   &print_hint;
   print "</BODY>\n";
   &exit_point;
}

##########################################################################
# err_bad_query( <query_string> ):
# --- bad query pattern, ask user to re-fill pattern again.
# RETURN : ( void )
##########################################################################
sub err_bad_query
{
   local( $query ) = @_;

   print "Content-type: text/html\n\n",
         "<HEAD><TITLE>Bad Query Pattern Input</TITLE></HEAD>\n",
         "<BODY>\n<H1> Bad Query Pattern Input </H1>\n",
         "This query pattern <B>\"$query\"</B> will match almost ",
         "all files in the database.<BR>\n",
         "Please re-fill a meanful pattern to search.<P>\n";
   &print_hint;
   print "</BODY>\n";
   &exit_point;
}

##########################################################################
# err_no_index( void ):
# --- GAIS index files were not found !!
# RETURN : ( void )
##########################################################################
sub err_no_index
{
   local( $indexdir ) = @_;

   print "Content-type: text/html\n\n",
         "<HEAD><TITLE>GAIS index files are not found</TITLE></HEAD>\n",
         "<BODY>\n<H1> GAIS index files are not found </H1>\n",
         "Sorry !! This services have some problems !<BR>\n",
         "May be the hard disk is crach , network is down or ... !<BR>\n",
         "You can report this error condition to us.<BR>\n",
         "We will recover it as soon as possible !<BR>\n ",
         "Click here to <A HREF=\"$MAILURL\">\n<B>send a mail to SA",
         "</B></A> !<BR>\nThanks for your report !<P>\n";
   &print_hint;
   print "</BODY>\n";
   &exit_point;
}

##########################################################################
# err_no_gais( void ):
# --- GAIS query program was not found !!
# RETURN : ( void )
##########################################################################
sub err_no_gais
{
   print "Content-type: text/html\n\n",
         "<HEAD><TITLE>gais query program isn't found</TITLE></HEAD>\n",
         "<BODY>\n<H1>\"gais\" query program isn't found</H1>\n",
         "Sorry !! This services have some problems !<BR>\n",
         "May be the hard disk is crach , network is down or ... !<BR>\n",
         "You can report this error condition to us.<BR>\n",
         "We will recover it as soon as possible !<BR>\n ",
         "Click here to <A HREF=\"$MAILURL\">\n<B>send a mail to SA",
         "</B></A> !<BR>\nThanks for your report !<P>\n";
   &print_hint;
   print "</BODY>\n";
   &exit_point;
}
